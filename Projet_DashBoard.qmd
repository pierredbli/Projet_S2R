---
title: "Dash_Board_Interactif"
author: "Pierre DOBELI"
format: html
editor: visual
---

```{r}
library(readr)
library(dplyr)
library(tidyr)
library(lubridate)
library(shiny) 
library(shiny.router) 
library(leaflet) 
library(sf)
library(ggplot2)
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
library(ggplot2)


```

```{r}
# Importation des données
Data <- read_csv("Data_test.csv",show_col_types = FALSE)
Data <- Data %>%
  mutate(datetime = paste(an, mois, jour, hrmn...14, sep = "-")) %>%
  mutate(datetime = as.POSIXct(datetime, format = "%Y-%m-%d-%H:%M:%S")) %>%  
  select(-jour, -mois, -an, -hrmn...14,-hrmn...15)  

Data <- Data %>% drop_na()
data <- Data %>%
  mutate(
    age = 2024 - an_nais,  # Calcul de l'âge
    age_class = case_when(
      age >= 18 & age <= 30 ~ "18-30",   # Classe 18-30 ans
      age > 30 & age <= 45 ~ "30-45",   # Classe 30-45 ans
      age > 45 & age <= 60 ~ "45-60",   # Classe 45-60 ans
      age > 60 ~ "60+",                 # Classe 60+ ans
    )
  ) %>%
  drop_na()

data <- data %>%
  mutate(
    transport = case_when(
      catv %in% c(3, 7, 10) ~ "Voiture",
      catv %in% c(1, 80) ~ "Vélo",
      catv %in% c(30, 31, 32, 33, 34) ~ "Moto",
      TRUE ~ "Autre"  # Si `catv` ne correspond à aucune de ces valeurs, il sera classé comme "Autre"
    ),
    sexe = case_when(
      sexe == 1 ~ "Homme",  # Sexe codé en 1
      sexe == 2 ~ "Femme",  # Sexe codé en 2
      TRUE ~ "Inconnu"      # Valeur par défaut si `sexe` n'est pas 1 ou 2
    )
  )
View(data)
```

```{r}
### Fonction de trie du DataFrame
filter_data_choice <- function(data, class_age = NULL, sex = NULL, departement = NULL, moyen_transport = NULL) {
  # Filtrer le dataFrame en fonction des arguments donnés
  if (!is.null(age)) {
    data <- data %>% filter(age_class == class_age)  # Comparer les chaînes de caractères pour l'âge
  }
  if (!is.null(sexe)) {
    data <- data %>% filter(sexe == sex)
  }
  if (!is.null(departement)) {
    data <- data %>% filter(dep == departement)
  }
  if (!is.null(moyen_transport)) {
    data <- data %>% filter(transport == moyen_transport)
  }
  
  return(data)
}
```

```{r}
### Générer le Graphe 11 ###

generate_accident_graph_11 <- function(data, age_test, dep_test, sexe_test, moyen_transport_test) {
  data_test <- data %>% 
    filter(age_class == age_test & sexe == sexe_test & catv %in% moyen_transport_test & dep == dep_test)
  
  # Filtrer les données pour ne garder que les accidents graves (grav = 2 ou 3)
  accidents_graves <- data %>% filter(grav %in% c(2, 3))
  
  # Agréger les données par les combinaisons des features d'intérêt
  accidents_aggreges <- accidents_graves %>%
    group_by(trajet, agg, atm, surf) %>%
    summarise(nb_accidents = n(), .groups = "drop") %>%
    arrange(desc(nb_accidents))
  
  # Identifier la combinaison qui provoque le plus d'accidents graves
  meilleure_combinaison <- accidents_aggreges %>% slice_max(nb_accidents, n = 1)
  
  # Informations détaillées pour chaque feature
  informations_features <- list(
    trajet = c("-1" = "Non renseigné", "0" = "Non renseigné", "1" = "Domicile - travail", "2" = "Domicile - école",
               "3" = "Courses - achats", "4" = "Utilisation professionnelle", "5" = "Promenade - loisirs", "9" = "Autre"),
    agg = c("1" = "Hors agglomération", "2" = "En agglomération"),
    atm = c("-1" = "Non renseigné", "1" = "Normale", "2" = "Pluie légère", "3" = "Pluie forte", "4" = "Neige - grêle",
            "5" = "Brouillard - fumée", "6" = "Vent fort - tempête", "7" = "Temps éblouissant", "8" = "Temps couvert", "9" = "Autre"),
    surf = c("-1" = "Non renseigné", "1" = "Normale", "2" = "Mouillée", "3" = "Flaques", "4" = "Inondée", "5" = "Enneigée",
             "6" = "Boue", "7" = "Verglacée", "8" = "Corps gras - huile", "9" = "Autre")
  )
  
  meilleure_combinaison_avec_details <- meilleure_combinaison %>%
    mutate(
      trajet = informations_features$trajet[as.character(trajet)],
      agg = informations_features$agg[as.character(agg)],
      atm = informations_features$atm[as.character(atm)],
      surf = informations_features$surf[as.character(surf)]
    )
  
  # Phrase descriptive
  phrase <- paste(
    "La combinaison qui provoque le plus d'accidents graves est : trajet =",
    meilleure_combinaison_avec_details$trajet, ", agg =",
    meilleure_combinaison_avec_details$agg, ", atm =",
    meilleure_combinaison_avec_details$atm, "et surf =",
    meilleure_combinaison_avec_details$surf, "avec",
    meilleure_combinaison_avec_details$nb_accidents, "accidents graves."
  )
  
  # Réunir les features dans un format long pour pouvoir facetter
  accidents_long <- accidents_graves %>%
    pivot_longer(cols = c(trajet, agg, atm, surf), names_to = "feature", values_to = "valeur")
  
  # Appliquer les labels en fonction des informations dans informations_features
  accidents_long <- accidents_long %>%
    mutate(valeur_label = case_when(
      feature == "trajet" ~ factor(valeur, levels = names(informations_features$trajet), labels = informations_features$trajet),
      feature == "agg" ~ factor(valeur, levels = names(informations_features$agg), labels = informations_features$agg),
      feature == "atm" ~ factor(valeur, levels = names(informations_features$atm), labels = informations_features$atm),
      feature == "surf" ~ factor(valeur, levels = names(informations_features$surf), labels = informations_features$surf)
    ))
  
  # Créer un graphique avec des couleurs sombres et des légendes
  graphique <- ggplot(accidents_long, aes(x = valeur_label, fill = valeur_label)) +
    geom_bar(stat = "count") +
    facet_wrap(~feature, scales = "free_x") +
    labs(
      title = "Nombre d'Accidents en Fonction des Features",
      y = "Nombre d'Accidents",
      fill = "Valeur"
    ) +
    scale_fill_manual(values = c("Non renseigné" = "#2c3e50", "Domicile - travail" = "#34495e", "Domicile - école" = "#5d6d7e", 
                                "Courses - achats" = "#85929e", "Utilisation professionnelle" = "#aab7b8", "Promenade - loisirs" = "#ccd1d1", 
                                "Autre" = "#d5dbdb", "Hors agglomération" = "#2ecc71", "En agglomération" = "#27ae60",
                                "Normale" = "#e74c3c", "Pluie légère" = "#c0392b", "Pluie forte" = "#e74c3c", 
                                "Neige - grêle" = "#8e44ad", "Brouillard - fumée" = "#9b59b6", "Vent fort - tempête" = "#8e44ad", 
                                "Temps éblouissant" = "#f39c12", "Temps couvert" = "#f39c12", "Autre" = "#f1c40f", 
                                "Mouillée" = "#2980b9", "Flaques" = "#3498db", "Inondée" = "#1abc9c", "Enneigée" = "#16a085", 
                                "Boue" = "#2c3e50", "Verglacée" = "#7f8c8d", "Corps gras - huile" = "#95a5a6")) +
    theme_minimal() +
    theme(
      legend.position = "right",        
      strip.text = element_text(size = 8),   
      axis.title = element_text(size = 12),  
      axis.text = element_text(size = 7, angle = 40),  
      plot.title = element_text(size = 16, face = "bold"),  
      legend.text = element_text(size = 5),     
      axis.text.x = element_text(angle = 40, hjust = 1),
      axis.text.y = element_text(angle = 40, hjust = 1)
    ) +
    coord_cartesian(clip = "off")  
  
  # Renvoi uniquement du graphique sans afficher les autres éléments
  return(graphique)
}

```

```{r}
  ### Graphique 3 ### 
graphique_3 <- function(data, moyen_transport) {
  
  # Préparation des données
  data <- data %>%
    mutate(
      protection = case_when(
        transport == "Voiture" & secu1 == 1 ~ "Avec ceinture",
        transport == "Voiture" & secu1 != 1 ~ "Sans ceinture",
        transport %in% c("Moto", "Vélo") & secu1 == 2 ~ "Avec casque",
        transport %in% c("Moto", "Vélo") & secu1 != 2 ~ "Sans casque",
        TRUE ~ "Sans équipement de protection"
      ),
      grav = factor(grav, levels = c(1, 2, 3, 4), 
                    labels = c("Indemne", "Tué", "Blessé hospitalisé", "Blessé léger"))
    ) %>%
    filter(transport == moyen_transport)
  
  # Créer les pie charts pour la proportion de gravité avec et sans protection
  pie_chart_data <- data %>%
    group_by(protection, grav) %>%
    summarise(count = n(), .groups = "drop") %>%
    ungroup()

  # Diviser les données en deux catégories : avec protection et sans protection
  with_protection <- pie_chart_data %>% filter(protection == "Avec ceinture" | protection == "Avec casque")
  without_protection <- pie_chart_data %>% filter(protection == "Sans ceinture" | protection == "Sans casque")
  
  # Créer les pie charts
  pie_chart_with_protection <- ggplot(with_protection, aes(x = "", y = count, fill = grav)) +
    geom_bar(stat = "identity", width = 1) +
    coord_polar(theta = "y") +
    geom_text(aes(label = scales::percent(count / sum(count), accuracy = 0.1)), 
              position = position_stack(vjust = 0.5), color = "black", size = 4) +
    labs(
      title = paste("Proportion des accidents avec protection pour", moyen_transport),
      fill = "Gravité"
    ) +
    theme_void() +
    theme(
      plot.title = element_text(hjust = 0.5, size = 10, face = "bold"),
      legend.position = "bottom",
      legend.title = element_text(size = 0),
      legend.text = element_text(size = 6)
    )
  
  pie_chart_without_protection <- ggplot(without_protection, aes(x = "", y = count, fill = grav)) +
    geom_bar(stat = "identity", width = 1) +
    coord_polar(theta = "y") +
    geom_text(aes(label = scales::percent(count / sum(count), accuracy = 0.1)), 
              position = position_stack(vjust = 0.5), color = "black", size = 4) +
    labs(
      title = paste("Proportion des accidents sans protection pour", moyen_transport),
      fill = "Gravité"
    ) +
    theme_void() +
    theme(
      plot.title = element_text(hjust = 0.5, size = 10, face = "bold"),
      legend.position = "bottom",
      legend.title = element_text(size = 0),
      legend.text = element_text(size = 6)
    )
  
  # Afficher les deux graphiques sur une même image
  grid.arrange(pie_chart_with_protection, pie_chart_without_protection, ncol = 2)
}


```

```{r}
### Génération du graphique 8 ### 

graphique_8 <- function(data_filtre) {
  library(dplyr)
  library(ggplot2)
  
  # Ajouter une colonne descriptive pour la gravité
  data_filtre <- data_filtre %>%
    mutate(
      hour = format(datetime, "%H"),
      grav_desc = case_when(
        grav == 1 ~ "Indemne",
        grav == 2 ~ "Tué",
        grav == 3 ~ "Blessé hospitalisé",
        grav == 4 ~ "Blessé léger",
        TRUE ~ "Inconnu"
      )
    )
  
  # Comptage par heure et gravité
  accidents_by_hour <- data_filtre %>%
    group_by(hour, grav_desc) %>%
    summarise(count = n(), .groups = "drop") %>%
    arrange(as.numeric(hour))
  
  # Palette de couleurs sombres
  grav_palette <- c(
    "Indemne" = "#4B0082",       # Indigo
    "Tué" = "#800000",          # Marron foncé
    "Blessé hospitalisé" = "#FF8C00", # Orange foncé
    "Blessé léger" = "#556B2F"  # Olive foncé
  )
  
  # Création du graphique
  ggplot(accidents_by_hour, aes(x = as.numeric(hour), y = count, fill = grav_desc)) +
    geom_bar(stat = "identity", color = "black", position = "stack") +
    scale_fill_manual(values = grav_palette) +
    labs(
      title = "Évolution du nombre d'accidents",
      x = "Heure de la journée",
      y = "Nombre d'accidents",
      fill = "Gravité"
    ) +
    theme_minimal() +
    theme(
      legend.title = element_text(face = "bold"),
      legend.background = element_rect(fill = "gray90", color = "black"),
      legend.key = element_rect(fill = "gray95")
    )
}

# Appel de la fonction
graphique_8(data_test)


```

```{r}
  ### Graphique n°10 ###
graphique_10 <- function(data_filtre) {
  library(dplyr)
  library(ggplot2)
  
  # Ajouter une colonne descriptive pour la gravité et une classe pour la vitesse
  data_filtre <- data_filtre %>%
    mutate(
      grav_desc = case_when(
        grav == 1 ~ "Indemne",
        grav == 2 ~ "Tué",
        grav == 3 ~ "Blessé hospitalisé",
        grav == 4 ~ "Blessé léger",
        TRUE ~ "Inconnu"
      ),
      vma_class = case_when(
        vma >= 0 & vma <= 30 ~ "0-30 km/h",
        vma > 30 & vma <= 50 ~ "30-50 km/h",
        vma > 50 & vma <= 90 ~ "50-90 km/h",
        vma > 90 & vma <= 130 ~ "90-130 km/h",
        TRUE ~ "130+ km/h"
      )
    )
  
  # Filtrer pour exclure la classe 130+ km/h
  accidents_by_vma_class <- data_filtre %>%
    filter(vma_class != "130+ km/h") %>%
    group_by(vma_class, grav_desc) %>%
    summarise(count = n(), .groups = "drop") %>%
    arrange(vma_class)
  
  # Palette de couleurs sombres
  grav_palette <- c(
    "Indemne" = "#4B0082",       # Indigo
    "Tué" = "#800000",          # Marron foncé
    "Blessé hospitalisé" = "#FF8C00", # Orange foncé
    "Blessé léger" = "#556B2F"  # Olive foncé
  )
  
  # Création du graphique
  ggplot(accidents_by_vma_class, aes(x = vma_class, y = count, fill = grav_desc)) +
    geom_bar(stat = "identity", color = "black", position = "stack") +
    scale_fill_manual(values = grav_palette) +
    labs(
      title = "Nombre d'accidents par classe de vitesse limitée",
      x = "Classe de vitesse limite autorisée (km/h)",
      y = "Nombre d'accidents",
      fill = "Gravité"
    ) +
    theme_minimal() +
    theme(
      legend.title = element_text(face = "bold"),
      legend.background = element_rect(fill = "gray90", color = "black"),
      legend.key = element_rect(fill = "gray95")
    )
}
```

```{r}
  ### Graphique numéro 9 ### 
graphique_9 <- function(data_filtre) {
  
  # Ajouter une colonne descriptive pour la gravité et pour la luminosité
  data_filtre <- data_filtre %>%
    mutate(
      grav_desc = case_when(
        grav == 1 ~ "Indemne",
        grav == 2 ~ "Tué",
        grav == 3 ~ "Blessé hospitalisé",
        grav == 4 ~ "Blessé léger",
        TRUE ~ "Inconnu"
      ),
      lum_desc = case_when(
        lum == 1 ~ "Plein jour",
        lum == 2 ~ "Crépuscule ou aube",
        lum == 3 ~ "Nuit sans éclairage public",
        lum == 4 ~ "Nuit avec éclairage public non allumé",
        lum == 5 ~ "Nuit avec éclairage public allumé",
        TRUE ~ "Inconnu"
      )
    )
  
  # Comptage par luminosité et gravité
  accidents_by_lum <- data_filtre %>%
    group_by(lum_desc, grav_desc) %>%
    summarise(count = n(), .groups = "drop") %>%
    arrange(lum_desc)
  
  # Palette de couleurs sombres
  grav_palette <- c(
    "Indemne" = "#4B0082",       # Indigo
    "Tué" = "#800000",          # Marron foncé
    "Blessé hospitalisé" = "#FF8C00", # Orange foncé
    "Blessé léger" = "#556B2F"  # Olive foncé
  )
  
  # Création du graphique
  ggplot(accidents_by_lum, aes(x = lum_desc, y = count, fill = grav_desc)) +
    geom_bar(stat = "identity", color = "black", position = "stack") +
    scale_fill_manual(values = grav_palette) +
    labs(
      title = "Nombre d'accidents en fonction de la luminosité",
      x = "Luminosité",
      y = "Nombre d'accidents",
      fill = "Gravité"
    ) +
    theme_minimal() +
    theme(
      legend.title = element_text(face = "bold"),
      legend.background = element_rect(fill = "gray90", color = "black"),
      legend.key = element_rect(fill = "gray95"),
      axis.text.x = element_text(angle = 45, hjust = 1)  # Rotation des labels de l'axe X
    )
}
```

```{r}
# UI
ui <- fluidPage(
  tags$head(
    # Mise en page en format A3 paysage
    tags$style(HTML("
      @page {
        size: A3 landscape;
        margin: 20mm;
      }
      body {
        font-family: Arial, sans-serif;
        padding: 0;
      }
      .container {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-start;
        width: 10%;  /* Largeur ajustée */
        margin: 0;  /* Réduit l'espacement autour */
      }
      .form-group {
        margin: 0px 0;  /* Espacement minimal entre les éléments */
      }
      .form-control {
        font-size: 5px;  /* Taille des cases réduite */
        padding: 0.5px;  /* Réduit davantage la taille des cases */
        height: 15px;    /* Hauteur plus petite des cases */
      }
      .leaflet-container {
        width: 100%;
        height: 250px;  /* Augmentation de la hauteur de la carte */
      }
    "))
  ),
  
  # Container pour afficher les éléments en haut à gauche
  fluidRow(
    column(
      width = 1,  # Ajustement de la largeur pour les choix
      div(
        class = "container",
        
        # Sélection du sexe
        div(
          class = "form-group",
          selectInput(
            "sexe", 
            "Sexe", 
            choices = c("Homme", "Femme"),
            selected = "Homme"
          )
        ),
        
        # Sélection du moyen de transport
        div(
          class = "form-group",
          selectInput(
            "transport", 
            "Moyen de transport", 
            choices = c("Voiture", "Vélo", "Moto"),
            selected = "Voiture"
          )
        ),
        
        # Sélection de la tranche d'âge
        div(
          class = "form-group",
          selectInput(
            "age", 
            "Tranche d'âge", 
            choices = c("18-30", "30-45", "45-60", "60+"),
            selected = "18-30"
          )
        )
      )
    )
  ),
  
  # Carte affichée juste en dessous des sélections
  fluidRow(
    column(
      width = 10,  # Ajustement de la largeur de la carte pour une meilleure visibilité
      leafletOutput("map", height = 250)  # Augmentation de la hauteur de la carte
    )
  ),
  
  # Affichage du message personnalisé selon le département sélectionné
  fluidRow(
    column(
      width = 12,
      textOutput("message_dep")
    )
  ),
  
  # Disposition des graphiques dans des lignes distinctes
  fluidRow(
    column(6, plotOutput("graphique_11")),
    column(6, plotOutput("graphique_3"))
  ),
  
  fluidRow(
    column(6, plotOutput("graphique_8")),
    column(6, plotOutput("graphique_10"))
  ),
  
  fluidRow(
    column(12, plotOutput("graphique_9"))
  )
)

```

```{r}
server <- function(input, output) {
  
  # Charger le GeoJSON des départements de la France
  geo_dep <- st_read("https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/departements-version-simplifiee.geojson")
  
  # Agréger les données pour compter les accidents par département
  accidents_par_dep <- data %>%
    group_by(dep) %>%
    summarise(accidents = n()) %>%
    ungroup()
  
  # Créer la carte interactive des départements avec le nombre d'accidents
  output$map <- renderLeaflet({
    leaflet(geo_dep) %>%
      addTiles() %>%
      addPolygons(
        fillColor = ~colorQuantile("YlOrRd", accidents_par_dep$accidents)(accidents_par_dep$accidents),
        color = "white",
        weight = 1,
        opacity = 0.7,
        fillOpacity = 0.4,
        popup = ~paste(nom, "<br>Accidents:", accidents_par_dep$accidents[accidents_par_dep$dep == code]),
        layerId = ~code
      ) %>%
      setView(lng = 2.2137, lat = 46.2276, zoom = 6)  # Centrer la carte sur la France
  })
  
  # Réagir à la sélection du département sur la carte
  observeEvent(input$map_shape_click, {
    dep_id <- input$map_shape_click$id
    dep_name <- geo_dep$nom[geo_dep$code == dep_id]
    
    # Afficher un message personnalisé en fonction du département sélectionné
    output$message_dep <- renderText({
      accidents_count <- accidents_par_dep$accidents[accidents_par_dep$dep == dep_id]
      paste("Vous avez sélectionné le département : ", dep_name, "<br>Nombre d'accidents : ", accidents_count)
    })
    
    # Mettre à jour les données filtrées selon le département sélectionné
  output$graphique_11 <- renderPlot({
      filtered_data <- filter_data_choice(data, class_age = input$age, sex = input$sexe, departement = dep_id, moyen_transport = input$transport)
      result <- generate_accident_graph_11(filtered_data, input$age, input$sexe, dep_id, input$transport)
      result
    })
  })
  output$graphique_3 <- renderPlot({
      filtered_data <- filter_data_choice(data, class_age = input$age, sex = input$sexe, moyen_transport = input$transport)
      result <- graphique_3(filtered_data,input$transport)
      result
    })
  output$graphique_8 <- renderPlot({
      filtered_data <- filter_data_choice(data, class_age = input$age, sex = input$sexe, moyen_transport = input$transport)
      result <- graphique_8(filtered_data)
      result
    })
  output$graphique_10 <- renderPlot({
      filtered_data <- filter_data_choice(data, class_age = input$age, sex = input$sexe, moyen_transport = input$transport)
      result <- graphique_10(filtered_data)
      result
    })
  output$graphique_9 <- renderPlot({
      filtered_data <- filter_data_choice(data, class_age = input$age, sex = input$sexe, moyen_transport = input$transport)
      result <- graphique_9(filtered_data)
      result
    })
}
# Lancer l'application
shinyApp(ui, server)
```

```{r}
filtered_data <- filter_data_choice(data, class_age = "18-30", sex = "Homme", departement = 33, moyen_transport = "Voiture")
      result <- generate_accident_graph_11(filtered_data,"18-30" , "Homme", 33, "Voiture")
```

```{r}
result
```
